Heap size 1024, #Req 5

********* Menu *********
Allocate= 1 <nInt>  | Deallocate = 2        |
Print Heap Meta = 3 | Print Heap Stat = 4 |
Print Entire Heap = 5 | Exit = 0
Your Choice => A: 3 integers = 12 bytes
>>> mymalloc(12)
A: Allocated at [0x4030000], request idx [0]

********* Menu *********
Allocate= 1 <nInt>  | Deallocate = 2        |
Print Heap Meta = 3 | Print Heap Stat = 4 |
Print Entire Heap = 5 | Exit = 0
Your Choice => A: 10 integers = 40 bytes
>>> mymalloc(40)
A: Allocated at [0x4030040], request idx [1]

********* Menu *********
Allocate= 1 <nInt>  | Deallocate = 2        |
Print Heap Meta = 3 | Print Heap Stat = 4 |
Print Entire Heap = 5 | Exit = 0
Your Choice => A: 80 integers = 320 bytes
>>> mymalloc(320)
A: Allocated at [0x4030200], request idx [2]

********* Menu *********
Allocate= 1 <nInt>  | Deallocate = 2        |
Print Heap Meta = 3 | Print Heap Stat = 4 |
Print Entire Heap = 5 | Exit = 0
Your Choice => A: 40 integers = 160 bytes
>>> mymalloc(160)
A: Allocated at [0x4030100], request idx [3]

********* Menu *********
Allocate= 1 <nInt>  | Deallocate = 2        |
Print Heap Meta = 3 | Print Heap Stat = 4 |
Print Entire Heap = 5 | Exit = 0
Your Choice => *Testing Done. Cleaning up!

Heap Meta Info:
===============
Total Size = 1024 bytes
Start Address = 0x4030000
A[10]: 
A[9]: 
A[8]: 
A[7]: [+  128] 
A[6]: 
A[5]: [+   32] 
A[4]: [+   16] 
A[3]: 
A[2]: 
A[1]: 
A[0]: 
>>> i: 0
>>> i: 1
>>> i: 2
>>> i: 3
>>> i: 4
>>> umm??
>>> i: 5
>>> umm??
>>> i: 6
>>> i: 7
>>> umm??
>>> i: 8
>>> i: 9

Heap Usage Statistics:
======================
Total Space: 1024 bytes
Total Space: 1024 bytes
Total Free Partitions: 3
Total Free Size: 176 bytes
Total Internal Fragmentation: 316 bytes
